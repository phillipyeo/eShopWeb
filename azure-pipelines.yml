# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- main

pool:
  name: test
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

# resources:
#   containers:
#   - container: eshopweb
#     image: phillipyeo/eshopweb:20231109.35

steps:
# - task: NuGetToolInstaller@1

# - task: NuGetCommand@2
#   inputs:
#     restoreSolution: '$(solution)'

# - task: VSBuild@1
#   inputs:
#     solution: '$(solution)'
#     msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)" /t:restore'
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'

# - task: VSTest@2
#   inputs:
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'

# - script: 'curl -L https://www.nuget.org/api/v2/package/Contrast.SensorsNetCore --output Contrast.SensorsNetCore.zip'
#   displayName: 'Download Contrast'

# - task: ExtractFiles@1
#   displayName: 'Unzip Contrast'
#   inputs:
#     archiveFilePatterns: '**/*.zip'
#     destinationFolder: 'C:\contrast'
#     cleanDestinationFolder: true
#     overwriteExistingFiles: true

# - task: Docker@2
#   displayName: Login to DockerHub
#   inputs:
#     command: login
#     containerRegistry: 'test_docker'

# - task: Docker@2
#   displayName: Build and Push to DockerHub
#   inputs:
#     containerRegistry: 'test_docker'
#     repository: 'phillipyeo/sqlserver'
#     command: 'build'
#     Dockerfile: '$(Build.SourcesDirectory)/src/SqlServer/Dockerfile'
#     buildContext: $(Build.SourcesDirectory)
#     tags: |
#       latest

# - task: Docker@2
#   displayName: Build and Push to DockerHub
#   inputs:
#     containerRegistry: 'test_docker'
#     repository: 'phillipyeo/publicapi'
#     command: 'build'
#     Dockerfile: '$(Build.SourcesDirectory)/src/PublicApi/Dockerfile'
#     buildContext: $(Build.SourcesDirectory)
#     tags: |
#       latest

- task: Docker@2
  displayName: Build eshopweb
  inputs:
    containerRegistry: 'test_docker'
    repository: 'phillipyeo/eShopWeb'
    command: 'build'
    Dockerfile: '$(Build.SourcesDirectory)/src/Web/Dockerfile'
    buildContext: $(Build.SourcesDirectory)
    arguments: '--build-arg CORECLR_PROFILER_PATH_64=/contrast/contentFiles/any/netstandard2.0/contrast/runtimes/linux-x64/native/ContrastProfiler.so --build-arg CORECLR_ENABLE_PROFILING=1 --build-arg CORECLR_PROFILER={8B2CE134-0948-48CA-A4B2-80DDAD9F5791} CONTRAST__API__URL=https://eval.contrastsecurity.com/Contrast --build-arg CONTRAST__API__API_KEY=ZhSrghj5Yot67rMA43ROtOJm1Ufn1wJD --build-arg CONTRAST__API__SERVICE_KEY=Y87MVBN0Q87W3QL0 --build-arg CONTRAST__API__USER_NAME=agent_ad7c8156-e1b3-4570-aea3-c1f7d1226626@OnetPartner'
    tags: |
      latest
      $(Build.BuildId)

# - script: echo "I can run inside the container (it starts by default)"
#   target:
#     container: eshopweb
# - task: Docker@2
#   displayName: start eshopweb
#   inputs:
#     command: start
#     container: eshopweb

# - script: 'tar -xvzf Contrast.SensorsNetCore.zip -C C:\contrast'
#   displayName: 'Unzip'

- script: 'docker network create eshopnet'
  displayName: 'Test Run Docker'

- script: 'docker run -p 1433:1433 --name sqlserver --net eshopnet -d phillipyeo/sqlserver:latest'
  displayName: 'Test Run Docker'

- script: 'docker run -p 5200:80 --name publicapi --net eshopnet  -d  phillipyeo/publicapi:latest'
  displayName: 'Test Run Docker'

- script: 'docker run -p 5106:80 --name eshopweb --net eshopnet  -d phillipyeo/eshopweb:latest'
  displayName: 'Test Run Docker'

# - task: Docker@2
#   inputs:
#     containerRegistry: 'test_docker'
#     command: 'start'
#     container: 'eshopweb'
    